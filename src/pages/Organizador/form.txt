
			<Formik
				initialValues={{
					nome: "",
					email: "",
					password: "",
					dataNascimento: ""
				}}

				validationSchema={CriarContaSchema}
				onSubmit={(values, { setSubmitting }) => {

					console.log("Click")
					alert("Olá mundo")

					// data.map(item => {

					// 	if (item.email === values.email) {
					// 		return console.log("Já existe um usuário cadastrado com este mesmo email. Use outro email.")
							
					// 	}
					// })

					// axios.post("http://localhost:3456/participante/create",
					// 	{
					// 		nome: values.nome,
					// 		palavraPasse: values.password,
					// 		email: values.email,
					// 		localizacao: "Bengad3uela",
					// 		telefone: "943164154",
					// 		dataNascimento: values.dataNascimento
					// 	}).then((sucesso) => {
					// 		console.log(sucesso)
					// 		setTimeout(() => {
					// 			alert(JSON.stringify(values, null, 2));
					// 			setSubmitting(false);

					// 			navigate("/participante/verificarContaPalestrante")
					// 		}, 400);
					// 	}).catch((error) => {
					// 		console.log(error)
					// 	})





				}}
			>

				{({
					values,
					errors,
					touched,
					handleChange,
					handleBlur,
					handleSubmit,
					isSubmitting,
					
					/* and other goodies */
				}) => (
					<Form onSubmit={handleSubmit} >

						<div className
							="limiter">
							<div className
								="container-login100"
							>
								<div className
									="wrap-login100 p-l-55 p-r-55 p-t-20 p-b-54">
									<div
										className="login100-form validate-form">
										<span className
											="login100-form-title p-b-15">
											Criar conta
										</span>

										<div className
											="wrap-input100 validate-input m-b-15" data-validate="Username is reauired">
											<span className
												="label-input100">Nome</span>
											<input className
												="input100" type="text" name="nome" placeholder="Nome"
												onChange={handleChange}
												onBlur={handleBlur}
												value={values.nome}
											/>
											{data.map(item => {
												if (item.nome === values.nome) {
													return (
														<div key={item.id} >
															<p className="container" style={{ color: "red" }}>Já existe um usuário cadastrado com este mesmo nome. Use outro nome.</p>
														</div>
													)
												}
											})}
											{errors.nome && touched.nome ? (
												<div className="container"
													style={{ color: "red" }}
												>

													{errors.nome}
												</div>
											) : null}

											<span className
												="focus-input100">
											</span>
										</div>

										<div className
											="wrap-input100 validate-input m-b-15" data-validate="Email é obrigátorio">
											<span className
												="label-input100">Email</span>
											<input className
												="input100" type="email" name="email" placeholder="Email"
												onChange={handleChange}
												onBlur={handleBlur}
												value={values.email} />
											<span className
												="focus-input100" ></span>
											{data.map(item => {
												if (item.email === values.email) {
													return (
														<div key={item.id} >
															<p className="container" style={{ color: "red" }}>Já existe um usuário cadastrado com este mesmo email. Use outro email.</p>
														</div>
													)
												}
											})}
											{errors.email && touched.email ? (
												<div className="container"
													style={{ color: "red" }}
												>

													{errors.email}
												</div>
											) : null}
										</div>

										<div className
											="wrap-input100 validate-input m-b-15" data-validate="Username is reauired">
											<span className
												="label-input100">Senha</span>
											<input className
												="input100" type="password" name="password" placeholder="Senha"
												onChange={handleChange}
												onBlur={handleBlur}
												value={values.password} />
											{errors.password && touched.password ? (
												<div className="container"
													style={{ color: "red" }}
												>

													{errors.password}
												</div>
											) : null}
											<span className
												="focus-input100"></span>
										</div>

										<div className
											="wrap-input100 validate-input m-b-15" data-validate="Username is reauired">
											<span className
												="label-input100">Data de nascimento</span>
											<input className
												="input100" type="date" name="dataNascimento" placeholder="Nome"
												onChange={handleChange}
												onBlur={handleBlur}
												value={values.dataNascimento}
											/>
											{errors.dataNascimento && touched.dataNascimento ? (
												<div className="container"
													style={{ color: "red" }}
												>

													{errors.dataNascimento}
												</div>
											) : null}

										</div>




										<div className="text-right p-t-8 p-b-15">
											{/* <a href="#">
							Forgot password?
						</a> */}
										</div>

										<div className="container-login100-form-btn">
											<div className="wrap-login100-form-btn">
												<div className="login100-form-bgbtn"></div>
												<button

													className="login100-form-btn"
													type="submit"
												disabled={isSubmitting}
												>
													Criar
												</button>
											</div>
										</div>



										<div className="txt1 text-center p-t-25 p-b-0">
											<span>
												<Link to={"/participante/loginParticipante"} >
													Iniciar sessão
												</Link>
											</span>
										</div>


									</div>
								</div>
							</div >
						</div >


					</Form>
				)}
			</Formik>
